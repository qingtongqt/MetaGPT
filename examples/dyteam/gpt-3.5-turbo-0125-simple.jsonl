{"task_id": "HumanEval/0", "completion": "\nfrom typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\nfrom typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    count = 0\n    current_group = \"\"\n    \n    for char in paren_string:\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n        \n        current_group += char\n        \n        if count == 0:\n            result.append(current_group.replace(\" \", \"\"))\n            current_group = \"\"\n    \n    return result\n\n# Test the function\nprint(separate_paren_groups('( ) (( )) (( )( ))'))  # Output: ['()', '(())', '(()())']\n"}
{"task_id": "HumanEval/2", "completion": "\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n    return number - int(number)\n"}
{"task_id": "HumanEval/3", "completion": "\nfrom typing import List\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n# Test cases\nprint(below_zero([1, 2, 3]))  # Output: False\nprint(below_zero([1, 2, -4, 5]))  # Output: True\n"}
{"task_id": "HumanEval/4", "completion": "\nfrom typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad\n"}
{"task_id": "HumanEval/5", "completion": "\nfrom typing import List\n\n\ndef intersperse(numbers: List[int], delimiter: int) -> List[int]:\n    \"\"\" Insert a number 'delimiter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimiter)\n    return result\n"}
{"task_id": "HumanEval/6", "completion": "\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    depths = []\n    max_depth = 0\n    current_depth = 0\n\n    for char in paren_string:\n        if char == '(':\n            current_depth += 1\n            max_depth = max(max_depth, current_depth)\n        elif char == ')':\n            current_depth -= 1\n\n    return depths\n\n# Test the function\nprint(parse_nested_parens('(()()) ((())) () ((())()())'))  # Output: [2, 3, 1, 3]\n"}
{"task_id": "HumanEval/7", "completion": "\nfrom typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring \"\"\"\n    return [s for s in strings if substring in s]\n\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/8", "completion": "\nfrom typing import List, Tuple\nfrom functools import reduce\nfrom operator import mul\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n    if not numbers:\n        return 0, 1\n    return sum(numbers), reduce(mul, numbers, 1)\n"}
{"task_id": "HumanEval/9", "completion": "\nfrom typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    if not numbers:\n        return []\n\n    max_list = [numbers[0]]\n    for i in range(1, len(numbers)):\n        max_list.append(max(numbers[i], max_list[i - 1]))\n\n    return max_list\n"}
{"task_id": "HumanEval/10", "completion": "\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    def find_palindrome_suffix(s):\n        for i in range(len(s), 0, -1):\n            if is_palindrome(s[:i]):\n                return s[i:]\n        return s\n\n    suffix = find_palindrome_suffix(string)\n    return string + string[:len(string) - len(suffix)][::-1]\n\nimport doctest\ndoctest.testmod()\n"}
{"task_id": "HumanEval/11", "completion": "\ndef string_xor(a: str, b: str) -> str:\n    result = \"\"\n    for i in range(len(a)):\n        if a[i] == b[i]:\n            result += '0'\n        else:\n            result += '1'\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\nfrom typing import List, Optional\n\ndef longest(strings: List[str]) -> Optional[str]:\n    if not strings:\n        return None\n    longest_str = max(strings, key=len)\n    return longest_str\n"}
{"task_id": "HumanEval/13", "completion": "\nimport math\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    return math.gcd(a, b)\n"}
{"task_id": "HumanEval/14", "completion": "\nfrom typing import List\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = [string[:i+1] for i in range(len(string))]\n    return prefixes\n"}
{"task_id": "HumanEval/15", "completion": "\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(map(str, range(n+1)))\n"}
{"task_id": "HumanEval/16", "completion": "\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    string = string.lower()\n    distinct_chars = set(string)\n    return len(distinct_chars)\n\n# Test cases\nprint(count_distinct_characters('xyzXYZ'))  # Output: 3\nprint(count_distinct_characters('Jerry'))   # Output: 4\n"}
{"task_id": "HumanEval/17", "completion": "\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    beats_mapping = {'o': 4, 'o|': 2, '.|': 1}\n    music_notes = music_string.split()\n    beats_list = [beats_mapping[note] for note in music_notes]\n    return beats_list\n\n# Test the function\nprint(parse_music('o o| .| o| o| .| .| .| .| o o'))  # Output: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n"}
{"task_id": "HumanEval/18", "completion": "\ndef how_many_times(string: str, substring: str) -> int:\n    count = 0\n    if not string or not substring:\n        return 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n\n# Test cases\nprint(how_many_times('', 'a'))  # Output: 0\nprint(how_many_times('aaa', 'a'))  # Output: 3\nprint(how_many_times('aaaa', 'aa'))  # Output: 3\n"}
{"task_id": "HumanEval/19", "completion": "\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    number_words = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    number_dict = {word: i for i, word in enumerate(number_words)}\n    \n    numbers_list = numbers.split()\n    numbers_list.sort(key=lambda x: number_dict[x])\n    \n    return ' '.join(numbers_list)\n"}
{"task_id": "HumanEval/20", "completion": "\nfrom typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    \n    for i in range(len(numbers) - 1):\n        diff = numbers[i+1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    \n    return result\n\n# Test cases\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2]))  # Output: (2.0, 2.2)\nprint(find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0]))  # Output: (2.0, 2.0)\n"}
{"task_id": "HumanEval/21", "completion": "\nfrom typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scaled_numbers = [(num - min_num) / (max_num - min_num) for num in numbers]\n    return scaled_numbers\n"}
{"task_id": "HumanEval/22", "completion": "\nfrom typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string \"\"\"\n    return len(string)\n\n# Test cases\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/24", "completion": "\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "\nfrom typing import List\n\ndef factorize(n: int) -> List[int]:\n    factors = []\n    divisor = 2\n    while n > 1:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        else:\n            divisor += 1\n    return factors\n\n# Test cases\nprint(factorize(8))  # Output: [2, 2, 2]\nprint(factorize(25))  # Output: [5, 5]\nprint(factorize(70))  # Output: [2, 5, 7]\n"}
{"task_id": "HumanEval/26", "completion": "\nfrom typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for num in numbers:\n        if numbers.count(num) == 1:\n            unique_numbers.append(num)\n    return unique_numbers\n"}
{"task_id": "HumanEval/27", "completion": "\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = ''\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string\n"}
{"task_id": "HumanEval/28", "completion": "\nfrom typing import List\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string \"\"\"\n    return ''.join(strings)\n\n# Test cases\nprint(concatenate([]))  # Output: ''\nprint(concatenate(['a', 'b', 'c']))  # Output: 'abc'\n"}
{"task_id": "HumanEval/29", "completion": "\nfrom typing import List\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\ndef get_positive(l: list):\n    return [num for num in l if num > 0]\n\n# Test cases\nprint(get_positive([-1, 2, -4, 5, 6]))  # Output: [2, 5, 6]\nprint(get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]))  # Output: [5, 3, 2, 3, 9, 123, 1]\n"}
{"task_id": "HumanEval/31", "completion": "\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases\nprint(is_prime(6))    # False\nprint(is_prime(101))  # True\nprint(is_prime(11))   # True\nprint(is_prime(13441))  # True\nprint(is_prime(61))   # True\nprint(is_prime(4))    # False\nprint(is_prime(1))    # False\n"}
{"task_id": "HumanEval/32", "completion": "\nimport math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The number of coefficients must be even.\")\n    \n    if xs[-1] == 0:\n        raise ValueError(\"The largest non-zero coefficient must be non-zero.\")\n    \n    def f(x):\n        return poly(xs, x)\n    \n    # Using Newton's method to find the zero\n    x0 = 0.0\n    while True:\n        x1 = x0 - f(x0) / poly([i * coeff for i, coeff in enumerate(xs)][1:], x0)\n        if abs(x1 - x0) < 1e-6:\n            return x1\n        x0 = x1\n"}
{"task_id": "HumanEval/33", "completion": "\nfrom typing import List\n\ndef sort_third(l: List[int]) -> List[int]:\n    sorted_indices = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = [l[i] for i in sorted_indices]\n    sorted_values.sort()\n    \n    result = l.copy()\n    for i in sorted_indices:\n        result[i] = sorted_values.pop(0)\n    \n    return result\n\n# Test cases\nprint(sort_third([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_third([5, 6, 3, 4, 8, 9, 2]))  # Output: [2, 6, 3, 4, 8, 9, 5]\n"}
{"task_id": "HumanEval/34", "completion": "\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n"}
{"task_id": "HumanEval/35", "completion": "\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n\n# Test cases\nprint(fizz_buzz(50))  # Output: 0\nprint(fizz_buzz(78))  # Output: 2\nprint(fizz_buzz(79))  # Output: 3\n"}
{"task_id": "HumanEval/37", "completion": "\nfrom typing import List\n\ndef sort_even(l: List[int]) -> List[int]:\n    even_indices = sorted([num for idx, num in enumerate(l) if idx % 2 == 0])\n    sorted_list = [num if idx % 2 != 0 else even_indices.pop(0) for idx, num in enumerate(l)]\n    return sorted_list\n\n# Test cases\nprint(sort_even([1, 2, 3]))  # Output: [1, 2, 3]\nprint(sort_even([5, 6, 3, 4]))  # Output: [3, 6, 5, 4]\n"}
{"task_id": "HumanEval/38", "completion": "\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # reverse the cyclic shifting done in encoding\n    groups = [group[-1] + group[:-1] if len(group) == 3 else group for group in [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\nimport math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int):\n    def fibonacci(n):\n        if n <= 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci(n - 1) + fibonacci(n - 2)\n\n    count = 0\n    i = 0\n    while count < n:\n        if is_prime(fibonacci(i)):\n            count += 1\n        i += 1\n\n    return fibonacci(i - 1)\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n"}
{"task_id": "HumanEval/40", "completion": "\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    from itertools import combinations\n\n    for combo in combinations(l, 3):\n        if sum(combo) == 0:\n            return True\n\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\ndef car_race_collision(n: int):\n    return n * (n - 1) // 2\n"}
{"task_id": "HumanEval/42", "completion": "\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\"\"\"\n    return [x + 1 for x in l]\n\n# Test cases\nprint(incr_list([1, 2, 3]))  # Output: [2, 3, 4]\nprint(incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]))  # Output: [6, 4, 6, 3, 4, 4, 10, 1, 124]\n"}
{"task_id": "HumanEval/43", "completion": "\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n    if x < 0 or base < 2 or base > 9:\n        return \"Invalid input\"\n    \n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n    \n    return result\n"}
{"task_id": "HumanEval/45", "completion": "\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n    return 0.5 * a * h\n"}
{"task_id": "HumanEval/46", "completion": "\ndef fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    \n    fib_values = [0, 0, 2, 0]\n    \n    for i in range(4, n+1):\n        next_val = fib_values[i-1] + fib_values[i-2] + fib_values[i-3] + fib_values[i-4]\n        fib_values.append(next_val)\n    \n    return fib_values[n]\n\n# Test cases\nprint(fib4(5))  # Output: 4\nprint(fib4(6))  # Output: 8\nprint(fib4(7))  # Output: 14\n"}
{"task_id": "HumanEval/47", "completion": "\nfrom statistics import median\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\"\"\"\n    return median(l)\n\n# Test cases\nprint(median([3, 1, 2, 4, 5]))  # Output: 3\nprint(median([-10, 4, 6, 1000, 10, 20]))  # Output: 15.0\n"}
{"task_id": "HumanEval/48", "completion": "\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n    return text == text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n"}
{"task_id": "HumanEval/50", "completion": "\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\ndef remove_vowels(text):\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    return all(num < t for num in l)\n"}
{"task_id": "HumanEval/53", "completion": "\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\nfrom collections import Counter\n\ndef same_chars(s0: str, s1: str):\n    return Counter(s0) == Counter(s1)\n"}
{"task_id": "HumanEval/55", "completion": "\ndef fib(n: int):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a\n\n# Test cases\nprint(fib(10))  # Output: 55\nprint(fib(1))   # Output: 1\nprint(fib(8))   # Output: 21\n"}
{"task_id": "HumanEval/56", "completion": "\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n# Test cases\nprint(correct_bracketing(\"<\"))    # False\nprint(correct_bracketing(\"<>\"))    # True\nprint(correct_bracketing(\"<<><>>\"))    # True\nprint(correct_bracketing(\"><<>\"))    # False\n"}
{"task_id": "HumanEval/57", "completion": "\nfrom typing import List\n\ndef monotonic(l: List[int]) -> bool:\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n    common_elements = list(set(l1) & set(l2))\n    return sorted(common_elements)\n"}
{"task_id": "HumanEval/59", "completion": "\nimport math\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(math.sqrt(num)) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    for i in range(int(math.sqrt(n)), 1, -1):\n        if n % i == 0 and is_prime(i):\n            return i\n\n# Test cases\nprint(largest_prime_factor(13195))  # Output: 29\nprint(largest_prime_factor(2048))   # Output: 2\n"}
{"task_id": "HumanEval/60", "completion": "\ndef sum_to_n(n: int):\n    return sum(range(1, n+1))\n\n# Test cases\nprint(sum_to_n(30))  # Output: 465\nprint(sum_to_n(100))  # Output: 5050\nprint(sum_to_n(5))  # Output: 15\nprint(sum_to_n(10))  # Output: 55\nprint(sum_to_n(1))  # Output: 1\n"}
{"task_id": "HumanEval/61", "completion": "\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0\n\n# Test cases\nprint(correct_bracketing(\"(\"))  # False\nprint(correct_bracketing(\"()\"))  # True\nprint(correct_bracketing(\"(()())\"))  # True\nprint(correct_bracketing(\")(()\"))  # False\n"}
{"task_id": "HumanEval/62", "completion": "\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    return [xs[i] * i for i in range(1, len(xs))]\n"}
{"task_id": "HumanEval/63", "completion": "\ndef fibfib(n: int):\n    if n == 0:\n        return 0\n    elif n == 1 or n == 2:\n        return 1\n    else:\n        fibfib_list = [0, 1, 1]\n        for i in range(3, n+1):\n            fibfib_list.append(fibfib_list[i-1] + fibfib_list[i-2] + fibfib_list[i-3])\n        return fibfib_list[n]\n\n# Test cases\nprint(fibfib(1))  # Output: 0\nprint(fibfib(5))  # Output: 4\nprint(fibfib(8))  # Output: 24\n"}
{"task_id": "HumanEval/64", "completion": "\ndef vowels_count(s):\n    vowels = 'aeiou'\n    count = 0\n    for i in range(len(s)):\n        if s[i].lower() in vowels:\n            if i == len(s) - 1 and s[i].lower() == 'y':\n                count += 1\n            elif s[i].lower() != 'y':\n                count += 1\n    return count\n\n# Test cases\nassert vowels_count(\"abcde\") == 2\nassert vowels_count(\"ACEDY\") == 3\nassert vowels_count(\"hello\") == 2\nassert vowels_count(\"Python\") == 1\nassert vowels_count(\"programming\") == 3\n"}
{"task_id": "HumanEval/65", "completion": "\ndef circular_shift(x, shift):\n    x_str = str(x)\n    shift = shift % len(x_str)\n    if shift == 0:\n        return x_str\n    else:\n        shifted_str = x_str[-shift:] + x_str[:-shift]\n        return shifted_str[::-1] if shift > len(x_str) else shifted_str\n\n# Test cases\nprint(circular_shift(12, 1))  # Output: \"21\"\nprint(circular_shift(12, 2))  # Output: \"12\"\n"}
{"task_id": "HumanEval/66", "completion": "\ndef digitSum(s):\n    return sum(ord(char) for char in s if char.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\ndef fruit_distribution(s, n):\n    apples = 0\n    oranges = 0\n    \n    # Extract the number of apples and oranges from the input string\n    for word in s.split():\n        if word.isdigit():\n            if \"apple\" in s:\n                apples = int(word)\n            elif \"orange\" in s:\n                oranges = int(word)\n    \n    # Calculate the number of mango fruits\n    mango = n - apples - oranges\n    \n    return mango\n"}
{"task_id": "HumanEval/68", "completion": "\ndef pluck(arr):\n    even_values = [num for num in arr if num % 2 == 0]\n    if not even_values:\n        return []\n    \n    min_even_value = min(even_values)\n    min_even_index = arr.index(min_even_value)\n    \n    return [min_even_value, min_even_index]\n"}
{"task_id": "HumanEval/69", "completion": "\nfrom collections import Counter\n\ndef search(lst):\n    counts = Counter(lst)\n    result = -1\n    for num, freq in counts.items():\n        if num > 0 and freq >= num:\n            result = max(result, num)\n    return result\n\n# Test cases\nprint(search([4, 1, 2, 2, 3, 1]))  # Output: 2\nprint(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))  # Output: 3\nprint(search([5, 5, 4, 4, 4]))  # Output: -1\n"}
{"task_id": "HumanEval/70", "completion": "\ndef strange_sort_list(lst):\n    sorted_lst = []\n    lst.sort()\n    while lst:\n        sorted_lst.append(lst.pop(0))\n        if lst:\n            sorted_lst.append(lst.pop())\n    return sorted_lst\n"}
{"task_id": "HumanEval/71", "completion": "\nimport math\n\ndef triangle_area(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        s = (a + b + c) / 2\n        area = math.sqrt(s * (s - a) * (s - b) * (s - c))\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\ndef will_it_fly(q, w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/73", "completion": "\ndef smallest_change(arr):\n    n = len(arr)\n    count = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            count += 1\n    return count\n\n# Test cases\nprint(smallest_change([1,2,3,5,4,7,9,6]))  # Output: 4\nprint(smallest_change([1, 2, 3, 4, 3, 2, 2]))  # Output: 1\nprint(smallest_change([1, 2, 3, 2, 1]))  # Output: 0\n"}
{"task_id": "HumanEval/74", "completion": "\ndef total_match(lst1, lst2):\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n\n    if total_chars_lst1 < total_chars_lst2:\n        return lst1\n    elif total_chars_lst1 > total_chars_lst2:\n        return lst2\n    else:\n        return lst1\n\n# Examples\nprint(total_match([], []))  # \u279e []\nprint(total_match(['hi', 'admin'], ['hI', 'Hi']))  # \u279e ['hI', 'Hi']\nprint(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']))  # \u279e ['hi', 'admin']\nprint(total_match(['hi', 'admin'], ['hI', 'hi', 'hi']))  # \u279e ['hI', 'hi', 'hi']\nprint(total_match(['4'], ['1', '2', '3', '4', '5']))  # \u279e ['4']\n"}
{"task_id": "HumanEval/75", "completion": "\nimport math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef is_multiply_prime(a):\n    if a < 2:\n        return False\n    \n    prime_count = 0\n    for i in range(2, a):\n        if is_prime(i) and a % i == 0:\n            prime_count += 1\n            if prime_count > 3:\n                return False\n    \n    return prime_count == 3\n\n# Test the function\nprint(is_multiply_prime(30))  # Output: True\n"}
{"task_id": "HumanEval/76", "completion": "\nimport math\n\ndef is_simple_power(x, n):\n    return math.log(x, n).is_integer()\n\n# Test cases\nprint(is_simple_power(1, 4))  # Output: True\nprint(is_simple_power(2, 2))  # Output: True\nprint(is_simple_power(8, 2))  # Output: True\nprint(is_simple_power(3, 2))  # Output: False\nprint(is_simple_power(3, 1))  # Output: False\nprint(is_simple_power(5, 3))  # Output: False\n"}
{"task_id": "HumanEval/77", "completion": "\nimport math\n\ndef iscube(a):\n    cube_root = round(a**(1/3))\n    return cube_root**3 == a\n\n# Test cases\nprint(iscube(1))    # True\nprint(iscube(2))    # False\nprint(iscube(-1))   # True\nprint(iscube(64))   # True\nprint(iscube(0))    # True\nprint(iscube(180))  # False\n"}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num):\n    primes = {'2', '3', '5', '7', 'B', 'D'}\n    count = 0\n    for digit in num:\n        if digit in primes:\n            count += 1\n    return count\n\n# Test cases\nprint(hex_key(\"AB\"))  # Output: 1\nprint(hex_key(\"1077E\"))  # Output: 2\nprint(hex_key(\"ABED1A33\"))  # Output: 4\nprint(hex_key(\"123456789ABCDEF0\"))  # Output: 6\nprint(hex_key(\"2020\"))  # Output: 2\n"}
{"task_id": "HumanEval/79", "completion": "\ndef decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]\n    return f\"db{binary}db\"\n"}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(s):\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i + 1] or s[i] == s[i + 2] or s[i + 1] == s[i + 2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n\n# Test the function\nprint(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]))  # Output: ['A+', 'B', 'C-', 'C', 'A-']\n"}
{"task_id": "HumanEval/82", "completion": "\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        if n % i == 0:\n            return False\n    return True\n\ndef prime_length(string):\n    return is_prime(len(string))\n"}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    count = 0\n    for i in range(10**(n-1), 10**n):\n        if str(i)[0] == '1' or str(i)[-1] == '1':\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "\ndef solve(N):\n    binary_sum = sum(int(digit) for digit in bin(N)[2:])\n    return bin(binary_sum)[2:]\n"}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices.\"\"\"\n    \n    total = 0\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            total += lst[i]\n    \n    return total\n\n# Test the function\nprint(add([4, 2, 6, 7]))  # Output: 2\n"}
{"task_id": "HumanEval/86", "completion": "\ndef anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    \n    for word in words:\n        ordered_word = ''.join(sorted(word))\n        ordered_words.append(ordered_word)\n    \n    return ' '.join(ordered_words)\n\n# Test cases\nprint(anti_shuffle('Hi'))  # 'Hi'\nprint(anti_shuffle('hello'))  # 'ehllo'\nprint(anti_shuffle('Hello World!!!'))  # 'Hello !!!Wdlor'\n"}
{"task_id": "HumanEval/87", "completion": "\ndef get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, val in enumerate(row):\n            if val == x:\n                coordinates.append((i, j))\n    \n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    \n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "\ndef sort_array(array):\n    sorted_array = array.copy()\n    if (sorted_array[0] + sorted_array[-1]) % 2 == 0:\n        sorted_array.sort(reverse=True)\n    else:\n        sorted_array.sort()\n    return sorted_array\n"}
{"task_id": "HumanEval/89", "completion": "\ndef encrypt(s):\n    import string\n\n    def shift_char(c, n):\n        if c.isalpha():\n            base = ord('a') if c.islower() else ord('A')\n            return chr((ord(c) - base + n) % 26 + base)\n        else:\n            return c\n\n    shifted_alphabet = ''.join([shift_char(c, 2) for c in string.ascii_lowercase]) + ''.join([shift_char(c, 2) for c in string.ascii_uppercase])\n\n    encrypted = ''\n    for char in s:\n        encrypted += shift_char(char, 2) if char.isalpha() else char\n\n    return encrypted\n"}
{"task_id": "HumanEval/90", "completion": "\ndef next_smallest(lst):\n    if len(lst) < 2:\n        return None\n    sorted_lst = sorted(set(lst))\n    if len(sorted_lst) < 2:\n        return None\n    return sorted_lst[1]\n"}
{"task_id": "HumanEval/91", "completion": "\ndef is_bored(S):\n    sentences = S.split('.')\n    sentences += S.split('?')\n    sentences += S.split('!')\n    \n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    \n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\ndef any_int(x, y, z):\n    if all(isinstance(num, int) for num in (x, y, z)):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n\n# Test cases\nprint(any_int(5, 2, 7))  # \u279e True\nprint(any_int(3, 2, 2))  # \u279e False\nprint(any_int(3, -2, 1))  # \u279e True\nprint(any_int(3.6, -2.2, 2))  # \u279e False\n"}
{"task_id": "HumanEval/93", "completion": "\ndef encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                encoded_message += chr(ord(char) + 2)\n            else:\n                encoded_message += char.swapcase()\n        else:\n            encoded_message += char\n    return encoded_message\n\n# Test cases\nprint(encode('test'))  # Output: 'TGST'\nprint(encode('This is a message'))  # Output: 'tHKS KS C MGSSCGG'\n"}
{"task_id": "HumanEval/94", "completion": "\nimport math\n\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(num))\n\n    prime_numbers = [num for num in lst if is_prime(num)]\n    largest_prime = max(prime_numbers)\n    return sum_of_digits(largest_prime)\n"}
{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(dict):\n    if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    first_key = keys[0]\n    if all(isinstance(key, str) and key.islower() for key in keys):\n        return True\n    elif all(isinstance(key, str) and key.isupper() for key in keys):\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/96", "completion": "\nimport math\n\ndef is_prime(num):\n    if num < 2:\n        return False\n    for i in range(2, int(math.sqrt(num)) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n"}
{"task_id": "HumanEval/97", "completion": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n    return abs(a % 10) * abs(b % 10)\n"}
{"task_id": "HumanEval/98", "completion": "\ndef count_upper(s):\n    vowels = 'AEIOU'\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count\n\n# Test cases\nprint(count_upper('aBCdEf'))  # Output: 1\nprint(count_upper('abcdefg'))  # Output: 0\nprint(count_upper('dBBE'))  # Output: 0\n"}
{"task_id": "HumanEval/99", "completion": "\nimport math\n\ndef closest_integer(value):\n    num = float(value)\n    if num >= 0:\n        return math.floor(num + 0.5)\n    else:\n        return math.ceil(num - 0.5)\n\n# Test cases\nprint(closest_integer(\"10\"))  # Output: 10\nprint(closest_integer(\"15.3\"))  # Output: 15\nprint(closest_integer(\"14.5\"))  # Output: 15\nprint(closest_integer(\"-14.5\"))  # Output: -15\n"}
{"task_id": "HumanEval/100", "completion": "\ndef make_a_pile(n):\n    stones = [n]\n    for i in range(n - 1):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        stones.append(n)\n    return stones\n\n# Test the function\nprint(make_a_pile(3))  # Output: [3, 5, 7]\n"}
{"task_id": "HumanEval/101", "completion": "\ndef words_string(s):\n    words = [word.strip() for word in s.replace(',', ' ').split()]\n    return words\n"}
{"task_id": "HumanEval/102", "completion": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n    max_even = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > max_even:\n            max_even = num\n    return max_even\n"}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    avg = round((n + m) / 2)\n    return bin(avg)\n\n# Test cases\nprint(rounded_avg(1, 5))   # Output: 0b11\nprint(rounded_avg(7, 5))   # Output: -1\nprint(rounded_avg(10, 20)) # Output: 0b1111\nprint(rounded_avg(20, 33)) # Output: 0b11010\n"}
{"task_id": "HumanEval/104", "completion": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    def has_even_digit(num):\n        return any(int(digit) % 2 == 0 for digit in str(num))\n    \n    return sorted([num for num in x if not has_even_digit(num)])\n"}
{"task_id": "HumanEval/105", "completion": "\nfrom collections import OrderedDict\n\ndef by_length(arr):\n    num_to_word = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n    sorted_arr = sorted(filtered_arr)\n    reversed_arr = sorted_arr[::-1]\n    result = [num_to_word[num] for num in reversed_arr]\n\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\nimport math\n\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(math.factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n\nprint(f(5))  # Output: [1, 2, 6, 24, 15]\n"}
{"task_id": "HumanEval/107", "completion": "\ndef even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for i in range(1, n+1):\n        if is_palindrome(i):\n            if i % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\ndef count_nums(arr):\n    def sum_digits(num):\n        return sum(int(d) for d in str(abs(num)))\n\n    count = 0\n    for num in arr:\n        if sum_digits(num) > 0:\n            count += 1\n    return count\n\n# Test cases\nprint(count_nums([]))  # Output: 0\nprint(count_nums([-1, 11, -11]))  # Output: 1\nprint(count_nums([1, 1, 2]))  # Output: 3\n"}
{"task_id": "HumanEval/109", "completion": "\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    \n    sorted_arr = sorted(arr)\n    n = len(arr)\n    \n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    \n    return False\n\n# Test cases\nprint(move_one_ball([3, 4, 5, 1, 2]))  # Output: True\nprint(move_one_ball([3, 5, 4, 1, 2]))  # Output: False\n"}
{"task_id": "HumanEval/110", "completion": "\ndef exchange(lst1, lst2):\n    # Check if the sum of odd numbers in lst1 is less than or equal to the sum of odd numbers in lst2\n    if sum(x % 2 != 0 for x in lst1) <= sum(x % 2 != 0 for x in lst2):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(exchange([1, 2, 3, 4], [1, 2, 3, 4]))  # Output: \"YES\"\nprint(exchange([1, 2, 3, 4], [1, 5, 3, 4]))  # Output: \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\nfrom collections import Counter\n\ndef histogram(test):\n    letters = test.split()\n    letter_count = Counter(letters)\n    max_count = max(letter_count.values())\n    result = {letter: count for letter, count in letter_count.items() if count == max_count}\n    return result\n"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s, c):\n    s = ''.join([char for char in s if char not in c])\n    is_palindrome = s = s == s[::-1]\n    return s, is_palindrome\n"}
{"task_id": "HumanEval/113", "completion": "\ndef odd_count(lst):\n    result = []\n    for string in lst:\n        odd_count = sum(1 for char in string if int(char) % 2 != 0)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {string} of the {odd_count}nput.\")\n    return result\n\n# Test cases\nprint(odd_count(['1234567']))\nprint(odd_count(['3', '11111111']))\n"}
{"task_id": "HumanEval/114", "completion": "\ndef minSubArraySum(nums):\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n\n# Test cases\nprint(minSubArraySum([2, 3, 4, 1, 2, 4]))  # Output: 1\nprint(minSubArraySum([-1, -2, -3]))  # Output: -6\n"}
{"task_id": "HumanEval/115", "completion": "\ndef max_fill(grid, capacity):\n    import math\n    \n    def count_buckets(grid_row, capacity):\n        count = 0\n        current_capacity = 0\n        for well in grid_row:\n            if well == 1:\n                current_capacity += 1\n                if current_capacity == capacity:\n                    count += 1\n                    current_capacity = 0\n            else:\n                current_capacity = 0\n        if current_capacity > 0:\n            count += 1\n        return count\n    \n    total_count = 0\n    for row in grid:\n        total_count += count_buckets(row, capacity)\n    \n    return total_count\n\n# Test the function with the provided examples\ngrid1 = [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\nbucket_capacity1 = 1\nprint(max_fill(grid1, bucket_capacity1))  # Output: 6\n\ngrid2 = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\nbucket_capacity2 = 2\nprint(max_fill(grid2, bucket_capacity2))  # Output: 5\n\ngrid3 = [[0,0,0], [0,0,0]]\nbucket_capacity3 = 5\nprint(max_fill(grid3, bucket_capacity3))  # Output: 0\n"}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "\ndef select_words(s, n):\n    import re\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = re.findall(r'[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]', word)\n        if len(consonants) == n:\n            result.append(word)\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    for i in range(len(word) - 2, 0, -1):\n        if word[i] in vowels and word[i-1] in consonants and word[i+1] in consonants:\n            return word[i]\n    \n    return \"\"\n\n# Test cases\nprint(get_closest_vowel(\"yogurt\"))  # Output: \"u\"\nprint(get_closest_vowel(\"FULL\"))    # Output: \"U\"\nprint(get_closest_vowel(\"quick\"))   # Output: \"\"\nprint(get_closest_vowel(\"ab\"))      # Output: \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    open_count = 0\n    for s in lst:\n        for char in s:\n            if char == '(':\n                open_count += 1\n            else:\n                if open_count == 0:\n                    return 'No'\n                open_count -= 1\n    if open_count == 0:\n        return 'Yes'\n    else:\n        return 'No'\n\n# Test cases\nprint(match_parens(['()(', ')']))  # Output: 'Yes'\nprint(match_parens([')', ')']))     # Output: 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\nimport heapq\n\ndef maximum(arr, k):\n    return sorted(heapq.nlargest(k, arr))\n"}
{"task_id": "HumanEval/121", "completion": "\ndef solution(lst):\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    total = 0\n    for num in arr[:k]:\n        if 10 <= num < 100:\n            total += num\n    return total\n"}
{"task_id": "HumanEval/123", "completion": "\ndef get_odd_collatz(n):\n    collatz_seq = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_seq.append(n)\n    \n    odd_numbers = sorted(set(filter(lambda x: x % 2 != 0, collatz_seq)))\n    return odd_numbers\n\n# Test the function\nprint(get_odd_collatz(5))  # Output: [1, 5]\n"}
{"task_id": "HumanEval/124", "completion": "\nimport re\n\ndef valid_date(date):\n    if not date:\n        return False\n\n    pattern = r'^(\\d{2})-(\\d{2})-(\\d{4})$'\n    match = re.match(pattern, date)\n    if not match:\n        return False\n\n    month, day, year = map(int, match.groups())\n\n    if month < 1 or month > 12:\n        return False\n\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        max_days = 31\n    elif month in [4, 6, 9, 11]:\n        max_days = 30\n    else:\n        if year % 4 == 0 and (year % 100 != 0 or year % 400 == 0):\n            max_days = 29\n        else:\n            max_days = 28\n\n    if day < 1 or day > max_days:\n        return False\n\n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\ndef split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return [word for word in txt if word.islower() and ord(word) % 2 != 0]\n\n# Test cases\nprint(split_words(\"Hello world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"Hello,world!\"))  # \u279e [\"Hello\", \"world!\"]\nprint(split_words(\"abcdef\"))  # \u279e 3\n"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    if len(lst) != len(set(lst)):\n        return False\n    return lst == sorted(lst)\n\n# Test cases\nprint(is_sorted([5]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5]))  # \u279e False\nprint(is_sorted([1, 2, 3, 4, 5, 6]))  # \u279e True\nprint(is_sorted([1, 2, 3, 4, 5, 6, 7]))  # \u279e True\nprint(is_sorted([1, 3, 2, 4, 5, 6, 7]))  # \u279e False\nprint(is_sorted([1, 2, 2, 3, 3, 4]))  # \u279e True\nprint(is_sorted([1, 2, 2, 2, 3, 4]))  # \u279e False\n"}
{"task_id": "HumanEval/127", "completion": "\nfrom math import sqrt\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_start > intersection_end:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n\n# Test cases\nprint(intersection((1, 2), (2, 3)))  # \"NO\"\nprint(intersection((-1, 1), (0, 4)))  # \"NO\"\nprint(intersection((-3, -1), (-5, 5)))  # \"YES\"\n"}
{"task_id": "HumanEval/128", "completion": "\ndef prod_signs(arr):\n    if not arr:\n        return None\n    \n    product = 1\n    sum_magnitudes = 0\n    \n    for num in arr:\n        product *= 1 if num == 0 else num / abs(num)\n        sum_magnitudes += abs(num)\n    \n    return product * sum_magnitudes\n"}
{"task_id": "HumanEval/129", "completion": "\nfrom heapq import heappush, heappop\n\ndef minPath(grid, k):\n    N = len(grid)\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def isValid(x, y):\n        return 0 <= x < N and 0 <= y < N\n    \n    def getLexicographicallySmallerPath(path1, path2):\n        for i in range(k):\n            if path1[i] < path2[i]:\n                return path1\n            elif path1[i] > path2[i]:\n                return path2\n        return path1\n    \n    pq = [(grid[i][j], i, j, [grid[i][j]]) for i in range(N) for j in range(N)]\n    while pq:\n        val, x, y, path = heappop(pq)\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if isValid(nx, ny):\n                heappush(pq, (grid[nx][ny], nx, ny, path + [grid[nx][ny]]))\n"}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 1]\n    elif n == 2:\n        return [1, 1, 1]\n    else:\n        tribonacci = [1, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(1 + i // 2)\n            else:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n        return tribonacci\n\n# Test the function\nprint(tri(3))  # Output: [1, 1, 1, 3]\n"}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    odd_product = 1\n    while n > 0:\n        digit = n % 10\n        if digit % 2 != 0:\n            odd_product *= digit\n        n //= 10\n    return odd_product if odd_product != 1 else 0\n\n# Test cases\nprint(digits(1))    # Output: 1\nprint(digits(4))    # Output: 0\nprint(digits(235))  # Output: 15\n"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return len(stack) < len(string) // 2\n\n# Test cases\nprint(is_nested('[[]]'))  # \u279e True\nprint(is_nested('[]]]]]]][[[[[]'))  # \u279e False\nprint(is_nested('[][]'))  # \u279e False\nprint(is_nested('[]'))  # \u279e False\nprint(is_nested('[[][]]'))  # \u279e True\nprint(is_nested('[[]][['))  # \u279e True\n"}
{"task_id": "HumanEval/133", "completion": "\nimport math\n\ndef sum_squares(lst):\n    total = 0\n    for num in lst:\n        total += math.ceil(num) ** 2\n    return total\n"}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    if txt.strip() == \"\":\n        return False\n    last_char = txt.strip()[-1]\n    if last_char.isalpha() and not last_char.isspace():\n        return True\n    return False\n\n# Test cases\nprint(check_if_last_char_is_a_letter(\"apple pie\"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"apple pi e\"))  # \u279e True\nprint(check_if_last_char_is_a_letter(\"apple pi e \"))  # \u279e False\nprint(check_if_last_char_is_a_letter(\"\"))  # \u279e False\n"}
{"task_id": "HumanEval/135", "completion": "\ndef can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            largest_index = i - 1\n    return largest_index\n\n# Test cases\nprint(can_arrange([1,2,4,3,5]))  # Output: 3\nprint(can_arrange([1,2,3]))  # Output: -1\n"}
{"task_id": "HumanEval/136", "completion": "\ndef largest_smallest_integers(lst):\n    neg_integers = [num for num in lst if num < 0]\n    pos_integers = [num for num in lst if num > 0]\n\n    largest_neg = max(neg_integers) if neg_integers else None\n    smallest_pos = min(pos_integers) if pos_integers else None\n\n    return (largest_neg, smallest_pos)\n"}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    else:\n        try:\n            a = float(a.replace(',', '.'))\n            b = float(b.replace(',', '.'))\n            if a == b:\n                return None\n            elif a > b:\n                return a\n            else:\n                return b\n        except ValueError:\n            return None\n\n# Test cases\nprint(compare_one(1, 2.5))  # \u279e 2.5\nprint(compare_one(1, \"2,3\"))  # \u279e \"2,3\"\nprint(compare_one(\"5,1\", \"6\"))  # \u279e \"6\"\nprint(compare_one(\"1\", 1))  # \u279e None\n"}
{"task_id": "HumanEval/138", "completion": "\ndef is_equal_to_sum_even(n):\n    if n % 2 != 0 or n < 8:\n        return False\n    return True\n\n# Test cases\nprint(is_equal_to_sum_even(4))  # False\nprint(is_equal_to_sum_even(6))  # False\nprint(is_equal_to_sum_even(8))  # True\n"}
{"task_id": "HumanEval/139", "completion": "\nimport math\n\ndef special_factorial(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= math.factorial(i)\n    return result\n\n# Test the function\nprint(special_factorial(4))  # Output: 288\n"}
{"task_id": "HumanEval/140", "completion": "\ndef fix_spaces(text):\n    import re\n    text = re.sub(r'\\s{2,}', '-', text)\n    text = text.replace(' ', '_')\n    return text\n\n# Test cases\nprint(fix_spaces(\"Example\"))  # Output: \"Example\"\nprint(fix_spaces(\"Example 1\"))  # Output: \"Example_1\"\nprint(fix_spaces(\" Example 2\"))  # Output: \"_Example_2\"\nprint(fix_spaces(\" Example   3\"))  # Output: \"_Example-3\"\n"}
{"task_id": "HumanEval/141", "completion": "\nimport re\n\ndef file_name_check(file_name):\n    if len(re.findall(r'\\d', file_name)) > 3:\n        return 'No'\n    \n    if file_name.count('.') != 1:\n        return 'No'\n    \n    file_parts = file_name.split('.')\n    if len(file_parts) != 2:\n        return 'No'\n    \n    if not file_parts[0] or not file_parts[0][0].isalpha():\n        return 'No'\n    \n    if file_parts[1] not in ['txt', 'exe', 'dll']:\n        return 'No'\n    \n    return 'Yes'\n\n# Test cases\nprint(file_name_check(\"example.txt\"))  # => 'Yes'\nprint(file_name_check(\"1example.dll\"))  # => 'No'\n"}
{"task_id": "HumanEval/142", "completion": "\ndef sum_squares(lst):\n    total = 0\n    for i in range(len(lst)):\n        if i % 3 == 0:\n            total += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            total += lst[i] ** 3\n        else:\n            total += lst[i]\n    return total\n\n# Test cases\nprint(sum_squares([1, 2, 3]))  # Output: 6\nprint(sum_squares([]))  # Output: 0\nprint(sum_squares([-1, -5, 2, -1, -5]))  # Output: -126\n"}
{"task_id": "HumanEval/143", "completion": "\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    def get_primes(words):\n        return [word for word in words if is_prime(len(word))]\n\n    words = sentence.split()\n    prime_words = get_primes(words)\n    return ' '.join(prime_words)\n"}
{"task_id": "HumanEval/144", "completion": "\nfrom fractions import Fraction\n\ndef simplify(x, n):\n    x_val = Fraction(x)\n    n_val = Fraction(n)\n    \n    result = x_val * n_val\n    \n    return result.denominator == 1\n"}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(map(int, str(abs(x)))), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "\ndef specialFilter(nums):\n    def is_odd_digit(num):\n        first_digit = int(str(abs(num))[0])\n        last_digit = int(str(abs(num))[-1])\n        return first_digit % 2 != 0 and last_digit % 2 != 0\n\n    count = 0\n    for num in nums:\n        if num > 10 and is_odd_digit(num):\n            count += 1\n\n    return count\n\n# Test cases\nprint(specialFilter([15, -73, 14, -15]))  # Output: 1\nprint(specialFilter([33, -2, -3, 45, 21, 109]))  # Output: 2\n"}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n):\n    count = 0\n    for i in range(1, n + 1):\n        a_i = i * i - i + 1\n        for j in range(i + 1, n + 1):\n            a_j = j * j - j + 1\n            for k in range(j + 1, n + 1):\n                a_k = k * k - k + 1\n                if (a_i + a_j + a_k) % 3 == 0:\n                    count += 1\n    return count\n\n# Test the function\nn = 5\nprint(get_max_triples(n))  # Output: 1\n"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    start_idx = planets.index(planet1)\n    end_idx = planets.index(planet2)\n    \n    if start_idx > end_idx:\n        start_idx, end_idx = end_idx, start_idx\n    \n    return tuple([planet for planet in planets[start_idx+1:end_idx]])\n"}
{"task_id": "HumanEval/149", "completion": "\ndef sorted_list_sum(lst):\n    lst = [word for word in lst if len(word) % 2 == 0]\n    return sorted(lst, key=lambda x: (len(x), x))\n"}
{"task_id": "HumanEval/150", "completion": "\nimport math\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef x_or_y(n, x, y):\n    if is_prime(n):\n        return x\n    else:\n        return y\n"}
{"task_id": "HumanEval/151", "completion": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n    \n    return sum(x**2 for x in lst if x > 0 and x % 2 != 0 and isinstance(x, int))\n"}
{"task_id": "HumanEval/152", "completion": "\ndef compare(game, guess):\n    return [abs(game[i] - guess[i]) if game[i] != guess[i] else 0 for i in range(len(game))]\n"}
{"task_id": "HumanEval/153", "completion": "\ndef Strongest_Extension(class_name, extensions):\n    def strength(extension):\n        return sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n    strongest_extension = max(extensions, key=strength)\n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "\ndef cycpattern_check(a, b):\n    if len(a) != len(b):\n        return False\n    double_a = a + a\n    return b in double_a\n\n# Test cases\nprint(cycpattern_check(\"abcd\", \"abd\"))  # False\nprint(cycpattern_check(\"hello\", \"ell\"))  # True\nprint(cycpattern_check(\"whassup\", \"psus\"))  # False\nprint(cycpattern_check(\"abab\", \"baa\"))  # True\nprint(cycpattern_check(\"efef\", \"eeff\"))  # False\nprint(cycpattern_check(\"himenss\", \"simen\"))  # True\n"}
{"task_id": "HumanEval/155", "completion": "\ndef even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for digit in str(abs(num)):\n        if int(digit) % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n    return (even_count, odd_count)\n\n# Test cases\nprint(even_odd_count(-12))  # Output: (1, 1)\nprint(even_odd_count(123))  # Output: (1, 2)\n"}
{"task_id": "HumanEval/156", "completion": "\ndef int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        return \"Number out of range\"\n\n    roman_numerals = {\n        1: 'i', 4: 'iv', 5: 'v', 9: 'ix', 10: 'x', 40: 'xl', 50: 'l',\n        90: 'xc', 100: 'c', 400: 'cd', 500: 'd', 900: 'cm', 1000: 'm'\n    }\n\n    result = ''\n    for value, numeral in sorted(roman_numerals.items(), key=lambda x: x[0], reverse=True):\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()\n\n# Test cases\nprint(int_to_mini_roman(19))  # Output: 'xix'\nprint(int_to_mini_roman(152))  # Output: 'clii'\nprint(int_to_mini_roman(426))  # Output: 'cdxxvi'\n"}
{"task_id": "HumanEval/157", "completion": "\nimport math\n\ndef right_angle_triangle(a, b, c):\n    sides = [a, b, c]\n    sides.sort()\n    \n    if sides[0]**2 + sides[1]**2 == sides[2]**2:\n        return True\n    else:\n        return False\n"}
{"task_id": "HumanEval/158", "completion": "\ndef find_max(words):\n    def count_unique_chars(word):\n        return len(set(word))\n\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = count_unique_chars(word)\n        if unique_chars > max_unique_chars or (unique_chars == max_unique_chars and word < max_word):\n            max_unique_chars = unique_chars\n            max_word = word\n\n    return max_word\n\n# Test cases\nprint(find_max([\"name\", \"of\", \"string\"]))  # Output: \"string\"\nprint(find_max([\"name\", \"enam\", \"game\"]))  # Output: \"enam\"\nprint(find_max([\"aaaaaaa\", \"bb\", \"cc\"]))  # Output: \"aaaaaaa\"\n"}
{"task_id": "HumanEval/159", "completion": "\ndef eat(number, need, remaining):\n    total_eaten = number + need\n    if total_eaten <= remaining:\n        return [total_eaten, remaining - total_eaten]\n    else:\n        return [total_eaten, 0]\n"}
{"task_id": "HumanEval/160", "completion": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebraic \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += operator[i] + str(operand[i + 1])\n    return eval(expression)\n\n# Test the function\noperator = ['+', '*', '-']\noperand = [2, 3, 4, 5]\nresult = do_algebra(operator, operand)\nprint(result)\n"}
{"task_id": "HumanEval/161", "completion": "\ndef solve(s):\n    result = ''\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not any(char.isalpha() for char in s):\n        return s[::-1]\n    return result\n\n# Test cases\nprint(solve(\"1234\"))  # Output: \"4321\"\nprint(solve(\"ab\"))    # Output: \"AB\"\nprint(solve(\"#a@C\"))  # Output: \"#A@c\"\n"}
{"task_id": "HumanEval/162", "completion": "\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\ndef generate_integers(a, b):\n    even_digits = [int(digit) for digit in range(a, b+1) if int(digit) % 2 == 0]\n    return even_digits\n\n# Test cases\nprint(generate_integers(2, 8))  # Output: [2, 4, 6, 8]\nprint(generate_integers(8, 2))  # Output: [2, 4, 6, 8]\nprint(generate_integers(10, 14))  # Output: []\n"}
