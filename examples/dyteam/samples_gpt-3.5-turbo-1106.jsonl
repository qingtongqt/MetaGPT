{"task_id": "HumanEval/0", "completion": "\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    if len(numbers) < 2:\n        return False\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False\n"}
{"task_id": "HumanEval/1", "completion": "\nfrom typing import List\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    paren_string = paren_string.replace(\" \", \"\")  # Remove spaces from the input string\n    result = []\n    count = 0\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            count += 1\n        elif char == ')':\n            count -= 1\n            if count == 0:\n                result.append(paren_string[start:i+1])\n                start = i+1\n    return result\n"}
{"task_id": "HumanEval/2", "completion": "\ndef truncate_number(number: float) -> float:\n    # Input validation\n    if not isinstance(number, float) or number <= 0:\n        raise ValueError(\"Input must be a positive floating point number\")\n\n    # Decomposition\n    integer_part = int(number)\n    decimal_part = number - integer_part\n\n    # Return\n    return decimal_part\n"}
{"task_id": "HumanEval/3", "completion": "\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n"}
{"task_id": "HumanEval/4", "completion": "\nfrom typing import List\nfrom statistics import mean\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty\")\n\n    if len(numbers) == 1:\n        return 0.0\n\n    mean_value = mean(numbers)\n    absolute_deviations = [abs(num - mean_value) for num in numbers]\n    return mean(absolute_deviations)\n"}
{"task_id": "HumanEval/5", "completion": "\nfrom typing import List\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for num in numbers:\n        result.append(num)\n        result.append(delimeter)\n    result = result[:-1]  # remove the last added delimeter\n    return result\n\n"}
{"task_id": "HumanEval/6", "completion": "\nfrom typing import List\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    result = []\n    for group in paren_string.split():\n        max_depth = 0\n        current_depth = 0\n        for char in group:\n            if char == '(':\n                current_depth += 1\n                max_depth = max(max_depth, current_depth)\n            elif char == ')':\n                current_depth -= 1\n        result.append(max_depth)\n    return result\n"}
{"task_id": "HumanEval/7", "completion": "\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    if not strings or not substring:\n        return []\n\n    filtered_strings = [s for s in strings if substring in s]\n    return filtered_strings\n"}
{"task_id": "HumanEval/8", "completion": "\nfrom typing import List, Tuple\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    if not numbers:\n        return (0, 1)\n    \n    sum_result = sum(numbers)\n    product_result = 1\n    for num in numbers:\n        product_result *= num\n    \n    return (sum_result, product_result)\n"}
{"task_id": "HumanEval/9", "completion": "\nfrom typing import List\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    max_so_far = float('-inf')\n    rolling_max_list = []\n    for num in numbers:\n        max_so_far = max(max_so_far, num)\n        rolling_max_list.append(max_so_far)\n    return rolling_max_list\n"}
{"task_id": "HumanEval/10", "completion": " \ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    for i in range(len(string), 0, -1):\n        if string[:i] == string[:i][::-1]:\n            return string + string[:i-1][::-1]\n    return string + string[:-1][::-1]\n"}
{"task_id": "HumanEval/11", "completion": "\ndef string_xor(a: str, b: str) -> str:\n    if not all(char in '01' for char in a) or not all(char in '01' for char in b):\n        raise ValueError(\"Input strings should consist only of 1s and 0s\")\n\n    if len(a) != len(b):\n        raise ValueError(\"Input strings should be of equal length\")\n\n    result = ''\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n\n    return result\n"}
{"task_id": "HumanEval/12", "completion": "\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n    if not strings:\n        return None\n    max_length = max(len(s) for s in strings)\n    return next(s for s in strings if len(s) == max_length)\n"}
{"task_id": "HumanEval/13", "completion": "\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n    # Handle edge cases\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a < 0:\n        a = -a\n    if b < 0:\n        b = -b\n    \n    # Calculate GCD using Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return a\n"}
{"task_id": "HumanEval/14", "completion": "\nreturn [string[:i+1] for i in range(len(string))]\n"}
{"task_id": "HumanEval/15", "completion": "\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    return ' '.join(map(str, range(n + 1)))\n"}
{"task_id": "HumanEval/16", "completion": "\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n    # Convert the string to lowercase to treat uppercase and lowercase versions of the same character as the same\n    string = string.lower()\n    \n    # Use a set to keep track of distinct characters\n    distinct_chars = set(string)\n    \n    # Return the count of distinct characters\n    return len(distinct_chars)\n"}
{"task_id": "HumanEval/17", "completion": "\nfrom typing import List\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n    # Parse the music string and convert notes to beat durations\n    notes_map = {'o': 4, 'o|': 2, '.|': 1}\n    beats = [notes_map[note] for note in music_string.split()]\n    return beats\n"}
{"task_id": "HumanEval/18", "completion": "\ndef how_many_times(string, substring):\n    \"\"\"\n    Returns the count of how many times the `substring` appears in the `string`, including overlapping occurrences.\n\n    Args:\n    string (str): The original string\n    substring (str): The substring to search for in the original string\n\n    Returns:\n    int: The count of occurrences of the `substring` within the `string`. Returns 0 if the `substring` is not found.\n    \"\"\"\n    count = 0\n    if not string or not substring:\n        return 0\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i + len(substring)] == substring:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/19", "completion": "\nfrom typing import List\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numerals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n    numerals = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine']\n    return ' '.join(sorted(numbers.split(), key=lambda x: numerals.index(x)))\n"}
{"task_id": "HumanEval/20", "completion": "\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    numbers.sort()\n    min_diff = float('inf')\n    result = (0, 0)\n    for i in range(len(numbers) - 1):\n        diff = abs(numbers[i] - numbers[i+1])\n        if diff < min_diff:\n            min_diff = diff\n            result = (numbers[i], numbers[i+1])\n    return result\n"}
{"task_id": "HumanEval/21", "completion": "\nfrom typing import List\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    min_num = min(numbers)\n    max_num = max(numbers)\n    scaled_numbers = [(x - min_num) / (max_num - min_num) for x in numbers]\n    return scaled_numbers\n"}
{"task_id": "HumanEval/22", "completion": "\ndef filter_integers(values: List[Any]) -> List[int]:\n    return [x for x in values if isinstance(x, int)]\n"}
{"task_id": "HumanEval/23", "completion": "\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)\n"}
{"task_id": "HumanEval/24", "completion": "\ndef largest_divisor(n: int) -> int:\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n"}
{"task_id": "HumanEval/25", "completion": "\nfrom typing import List\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n    factors = []\n    divisor = 2\n    while n > 1:\n        while n % divisor == 0:\n            factors.append(divisor)\n            n //= divisor\n        divisor += 1\n    return factors\n"}
{"task_id": "HumanEval/26", "completion": "\nfrom typing import List\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    unique_elements = set()\n    result = []\n    for num in numbers:\n        if num not in unique_elements:\n            unique_elements.add(num)\n            result.append(num)\n    return result\n"}
{"task_id": "HumanEval/27", "completion": "\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n    flipped_string = ''\n    for char in string:\n        if char.isalpha():\n            if char.islower():\n                flipped_string += char.upper()\n            else:\n                flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string\n"}
{"task_id": "HumanEval/28", "completion": "\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n    return ''.join(strings)\n"}
{"task_id": "HumanEval/29", "completion": "\nfrom typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n    if not strings or not prefix:\n        return []\n\n    return [s for s in strings if s.startswith(prefix)]\n"}
{"task_id": "HumanEval/30", "completion": "\ndef get_positive(l: list):\n    \"\"\"\n    Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]\n"}
{"task_id": "HumanEval/31", "completion": "\ndef is_prime(n):\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\n"}
{"task_id": "HumanEval/32", "completion": "\nimport math\n\ndef poly(xs: list, x: float) -> float:\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list) -> float:\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"The input list must have an even number of coefficients\")\n\n    non_zero_coeffs = [c for c in xs if c != 0]\n    if not non_zero_coeffs:\n        raise ValueError(\"The input list must have at least one non-zero coefficient\")\n\n    max_non_zero_coeff = max(non_zero_coeffs)\n    degree = len(xs) - 1\n    return -max_non_zero_coeff / poly(xs[:-1], 1)\n"}
{"task_id": "HumanEval/33", "completion": "\ndef sort_third(l: list):\n    result = l.copy()\n    divisible_by_three = [i for i in range(len(l)) if i % 3 == 0]\n    sorted_values = sorted([l[i] for i in divisible_by_three])\n    for i, val in zip(divisible_by_three, sorted_values):\n        result[i] = val\n    return result\n"}
{"task_id": "HumanEval/34", "completion": "\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(list(set(l)))\n"}
{"task_id": "HumanEval/35", "completion": "\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n    return max(l)\n"}
{"task_id": "HumanEval/36", "completion": "\ndef fizz_buzz(n: int):\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            if '7' in str(i):\n                count += 1\n    return count\n"}
{"task_id": "HumanEval/37", "completion": "\ndef sort_even(l):\n    if not l:\n        return []\n    \n    even_indices = sorted([l[i] for i in range(len(l)) if i % 2 == 0])\n    result = [0] * len(l)\n    result[::2] = l[::2]\n    result[1::2] = even_indices\n    return result\n"}
{"task_id": "HumanEval/38", "completion": "\ndef encode_cyclic(s: str):\n    \"\"\"\n    Returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # Split string to groups, each of length 3\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Cycle elements in each group unless the group has fewer than 3 elements\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    Takes as input a string encoded with encode_cyclic function and returns the decoded string.\n    \"\"\"\n    # Split string to groups, each of length 3\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # Reverse cycle elements in each group unless the group has fewer than 3 elements\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n"}
{"task_id": "HumanEval/39", "completion": "\ndef prime_fib(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def generate_fibonacci_sequence(length):\n        fib_sequence = [0, 1]\n        while len(fib_sequence) < length:\n            next_num = fib_sequence[-1] + fib_sequence[-2]\n            fib_sequence.append(next_num)\n        return fib_sequence\n\n    fib_sequence = generate_fibonacci_sequence(n)\n    prime_fib_numbers = [num for num in fib_sequence if is_prime(num)]\n    return prime_fib_numbers[n - 1]\n"}
{"task_id": "HumanEval/40", "completion": "\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n"}
{"task_id": "HumanEval/41", "completion": "\ndef car_race_collision(n: int):\n    return n * (n - 1)\n"}
{"task_id": "HumanEval/42", "completion": "\ndef incr_list(l: list):\n    \"\"\"\n    Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]\n"}
{"task_id": "HumanEval/43", "completion": "\ndef pairs_sum_to_zero(l):\n    if len(l) < 2:\n        return False\n    seen = set()\n    for num in l:\n        if -num in seen:\n            return True\n        seen.add(num)\n    return False\n"}
{"task_id": "HumanEval/44", "completion": "\ndef change_base(x: int, base: int):\n    if x < 0 or base < 2 or base > 9:\n        return \"Invalid input\"\n\n    result = \"\"\n    while x > 0:\n        remainder = x % base\n        result = str(remainder) + result\n        x = x // base\n\n    return result\n"}
{"task_id": "HumanEval/45", "completion": "\ndef triangle_area(a, h):\n    \"\"\"\n    Given length of a side and height, return the area of a triangle.\n    \n    Args:\n    a (float): Length of a side of the triangle\n    h (float): Height of the triangle\n    \n    Returns:\n    float: Area of the triangle\n    \"\"\"\n    if not all(isinstance(val, (int, float)) for val in (a, h)) or a <= 0 or h <= 0:\n        return \"Invalid input. Please provide positive numeric values for side length and height.\"\n    \n    area = 0.5 * a * h\n    return round(area, 2)\n"}
{"task_id": "HumanEval/46", "completion": "\ndef fib4(n: int):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        a, b, c, d = 0, 0, 2, 0\n        for _ in range(4, n + 1):\n            a, b, c, d = b, c, d, a + b + c + d\n        return d\n"}
{"task_id": "HumanEval/47", "completion": "\ndef median(l: list):\n    \"\"\"\n    Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n    l.sort()\n    n = len(l)\n    if n % 2 == 0:\n        return (l[n//2 - 1] + l[n//2]) / 2\n    else:\n        return l[n//2]\n"}
{"task_id": "HumanEval/48", "completion": "\ndef is_palindrome(text: str):\n    clean_text = ''.join(char for char in text if char.isalnum()).lower()\n    return clean_text == clean_text[::-1]\n"}
{"task_id": "HumanEval/49", "completion": "\ndef modp(n: int, p: int) -> int:\n    \"\"\"\n    Return 2^n modulo p (be aware of numerics).\n    \n    Examples:\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n    return pow(2, n, p)\n"}
{"task_id": "HumanEval/50", "completion": "\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.islower() else\n                   chr(((ord(ch) + 5 - ord(\"A\")) % 26) + ord(\"A\")) if ch.isupper() else ch for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) if ch.islower() else\n                   chr(((ord(ch) - 5 - ord(\"A\")) % 26) + ord(\"A\")) if ch.isupper() else ch for ch in s])\n"}
{"task_id": "HumanEval/51", "completion": "\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])\n"}
{"task_id": "HumanEval/52", "completion": "\ndef below_threshold(l: list, t: int):\n    return all(num < t for num in l)\n"}
{"task_id": "HumanEval/53", "completion": "\ndef add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n    return x + y\n"}
{"task_id": "HumanEval/54", "completion": "\ndef same_chars(str1, str2):\n    return sorted(str1) == sorted(str2)\n"}
{"task_id": "HumanEval/55", "completion": "\ndef fib(n: int) -> int:\n    \"\"\"\n    Return n-th Fibonacci number.\n\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a, b = 0, 1\n        for _ in range(2, n + 1):\n            a, b = b, a + b\n        return b\n"}
{"task_id": "HumanEval/56", "completion": "\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/57", "completion": "\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n    increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\n    decreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n    return increasing or decreasing\n"}
{"task_id": "HumanEval/58", "completion": "\ndef common(l1: list, l2: list):\n    return sorted(list(set(l1) & set(l2)))\n"}
{"task_id": "HumanEval/59", "completion": "\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    # Implementation here\n"}
{"task_id": "HumanEval/60", "completion": "\ndef sum_to_n(n: int):\n    return n * (n + 1) // 2\n"}
{"task_id": "HumanEval/61", "completion": "\ndef correct_bracketing(brackets: str):\n    stack = []\n    for bracket in brackets:\n        if bracket == '(':\n            stack.append(bracket)\n        elif bracket == ')':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack\n"}
{"task_id": "HumanEval/62", "completion": "\ndef derivative(xs: list):\n    return [xs[i] * i for i in range(1, len(xs))]\n"}
{"task_id": "HumanEval/63", "completion": "\ndef fibfib(n: int):\n    if n == 0 or n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        a, b, c = 0, 0, 1\n        for _ in range(3, n + 1):\n            a, b, c = b, c, a + b + c\n        return c\n"}
{"task_id": "HumanEval/64", "completion": "\ndef vowels_count(s):\n    \"\"\"\n    Returns the number of vowels in the given word.\n\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u', and 'y' only when it is at the end of the given word.\n    \n    Args:\n    s (str): A string representing a word.\n\n    Returns:\n    int: The number of vowels in the word.\n\n    Raises:\n    ValueError: If the input string is empty or contains non-alphabetic characters.\n    \"\"\"\n\n    if not s.isalpha():\n        raise ValueError(\"Input string must contain only alphabetic characters\")\n\n    s = s.lower()\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    count = sum(1 for char in s[:-1] if char in vowels)  # Count all vowels except 'y' at the end\n    if s[-1] == 'y':\n        count += 1\n\n    return count\n"}
{"task_id": "HumanEval/65", "completion": "\ndef circular_shift(x, shift):\n    x_str = str(x)\n    num_digits = len(x_str)\n    shift = shift % num_digits  # handle cases where shift is greater than number of digits\n\n    if shift == 0:\n        return x_str\n    elif shift == num_digits:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]\n"}
{"task_id": "HumanEval/66", "completion": "\ndef digitSum(s):\n    return sum(ord(c) for c in s if c.isupper())\n"}
{"task_id": "HumanEval/67", "completion": "\ndef fruit_distribution(s, n):\n    apples = int(s.split(' ')[0])\n    oranges = int(s.split(' ')[3])\n    mangoes = n - apples - oranges\n    return mangoes\n"}
{"task_id": "HumanEval/68", "completion": "\ndef pluck(arr):\n    smallest_even = float('inf')\n    smallest_even_index = -1\n    \n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and arr[i] < smallest_even:\n            smallest_even = arr[i]\n            smallest_even_index = i\n    \n    if smallest_even_index == -1:\n        return []\n    else:\n        return [smallest_even, smallest_even_index]\n"}
{"task_id": "HumanEval/69", "completion": "\nfrom collections import Counter\n\ndef search(lst):\n    freq_count = Counter(lst)\n    max_val = -1\n    for num, freq in freq_count.items():\n        if num <= freq and num > max_val:\n            max_val = num\n    return max_val\n"}
{"task_id": "HumanEval/70", "completion": "\ndef strange_sort_list(lst):\n    if not lst:\n        return []\n\n    sorted_lst = sorted(lst)\n    result = []\n    while sorted_lst:\n        result.append(sorted_lst.pop(0))\n        if sorted_lst:\n            result.append(sorted_lst.pop())\n    return result\n"}
{"task_id": "HumanEval/71", "completion": "\ndef triangle_area(a, b, c):\n    # Check if the sides form a valid triangle\n    if a + b > c and a + c > b and b + c > a:\n        # Calculate the semi-perimeter\n        s = (a + b + c) / 2\n        # Calculate the area using Heron's formula\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        # Round the area to 2 decimal points\n        return round(area, 2)\n    else:\n        return -1\n"}
{"task_id": "HumanEval/72", "completion": "\ndef will_it_fly(q, w):\n    return q == q[::-1] and sum(q) <= w\n"}
{"task_id": "HumanEval/73", "completion": "\ndef smallest_change(arr):\n    n = len(arr)\n    changes = 0\n    for i in range(n // 2):\n        if arr[i] != arr[n - i - 1]:\n            changes += 1\n    return changes\n"}
{"task_id": "HumanEval/74", "completion": "\ndef total_match(lst1, lst2):\n    # Validate input\n    if not all(isinstance(item, str) for sublist in [lst1, lst2] for item in sublist):\n        raise ValueError(\"Input lists must contain only strings\")\n\n    # Calculate total number of characters in each list\n    total_chars_lst1 = sum(len(word) for word in lst1)\n    total_chars_lst2 = sum(len(word) for word in lst2)\n\n    # Compare totals and return the appropriate list\n    return lst1 if total_chars_lst1 <= total_chars_lst2 else lst2\n"}
{"task_id": "HumanEval/75", "completion": "\ndef is_multiply_prime(a):\n    \"\"\"\n    Return True if the given number is the multiplication of 3 prime numbers and False otherwise.\n    \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n    if a < 2:\n        return False\n    for i in range(2, int(a ** 0.5) + 1):\n        if a % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/76", "completion": "\ndef is_simple_power(x, n):\n    if x == 1:\n        return True\n    for i in range(2, int(x**0.5) + 1):\n        if n ** i == x:\n            return True\n    return False\n"}
{"task_id": "HumanEval/77", "completion": "\ndef iscube(a):\n    if a < 0:\n        a = -a\n    root = round(a ** (1/3))\n    return root ** 3 == a\n"}
{"task_id": "HumanEval/78", "completion": "\ndef hex_key(num):\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n    count = sum(1 for digit in num if digit in prime_hex_digits)\n    return count\n"}
{"task_id": "HumanEval/79", "completion": "\ndef decimal_to_binary(decimal):\n    \"\"\"Converts a decimal number to its binary representation.\n\n    Args:\n    decimal (int): The decimal number to be converted.\n\n    Returns:\n    str: A string representing the binary number with 'db' at the beginning and end.\n    \n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n    if not isinstance(decimal, int) or decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer\")\n\n    binary_str = bin(decimal)[2:]\n    return f\"db{binary_str}db\"\n"}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(s):\n    \"\"\"Check if the string is happy or not.\n    \n    Args:\n    s (str): The input string\n    \n    Returns:\n    bool: True if the string is happy, False otherwise\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/81", "completion": "\ndef numerical_letter_grade(grades):\n    letter_grades = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grades.append('A+')\n        elif gpa > 3.7:\n            letter_grades.append('A')\n        elif gpa > 3.3:\n            letter_grades.append('A-')\n        elif gpa > 3.0:\n            letter_grades.append('B+')\n        elif gpa > 2.7:\n            letter_grades.append('B')\n        elif gpa > 2.3:\n            letter_grades.append('B-')\n        elif gpa > 2.0:\n            letter_grades.append('C+')\n        elif gpa > 1.7:\n            letter_grades.append('C')\n        elif gpa > 1.3:\n            letter_grades.append('C-')\n        elif gpa > 1.0:\n            letter_grades.append('D+')\n        elif gpa > 0.7:\n            letter_grades.append('D')\n        elif gpa >= 0.0:\n            letter_grades.append('D-')\n        else:\n            letter_grades.append('E')\n    return letter_grades\n"}
{"task_id": "HumanEval/82", "completion": "\ndef prime_length(string):\n    if len(string) < 2:\n        return False\n    for i in range(2, int(len(string) ** 0.5) + 1):\n        if len(string) % i == 0:\n            return False\n    return True\n"}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    count = 0\n    if n == 1:\n        count = 1\n    else:\n        count = 2 * 9 * 10**(n-2)\n    return count\n"}
{"task_id": "HumanEval/84", "completion": "\ndef solve(N):\n    binary_sum = bin(sum(int(digit) for digit in str(N)))[2:]\n    return binary_sum\n"}
{"task_id": "HumanEval/85", "completion": " \ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n    \n    Args:\n    lst: a non-empty list of integers\n    \n    Returns:\n    The sum of even elements at odd indices in the input list.\n    \"\"\"\n    \n    # Input validation\n    if not lst or not all(isinstance(x, int) for x in lst):\n        return 0  # or raise ValueError(\"Input list must be non-empty and contain only integers\")\n    \n    # Identification of even elements and selection of elements at odd indices\n    even_elements_at_odd_indices = [x for i, x in enumerate(lst) if i % 2 != 0 and x % 2 == 0]\n    \n    # Return the sum of even elements at odd indices\n    return sum(even_elements_at_odd_indices)\n"}
{"task_id": "HumanEval/86", "completion": "\ndef anti_shuffle(s):\n    words = s.split()\n    ordered_words = []\n    for word in words:\n        if word.isalpha():\n            ordered_words.append(''.join(sorted(word)))\n        else:\n            alpha_part = ''.join(c for c in word if c.isalpha())\n            non_alpha_part = ''.join(c for c in word if not c.isalpha())\n            ordered_words.append(''.join(sorted(alpha_part)) + non_alpha_part)\n    return ' '.join(ordered_words)\n"}
{"task_id": "HumanEval/87", "completion": "\ndef get_row(lst, x):\n    coordinates = []\n    for i, row in enumerate(lst):\n        for j, value in enumerate(row):\n            if value == x:\n                coordinates.append((i, j))\n    coordinates.sort(key=lambda coord: (coord[0], -coord[1]))\n    return coordinates\n"}
{"task_id": "HumanEval/88", "completion": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    # Your code here\n"}
{"task_id": "HumanEval/89", "completion": "\ndef encrypt(s):\n    result = \"\"\n    for char in s:\n        if char.islower():\n            encrypted_char = chr(((ord(char) - 97 + 2 * 2) % 26) + 97)\n        elif char.isupper():\n            encrypted_char = chr(((ord(char) - 65 + 2 * 2) % 26) + 65)\n        else:\n            encrypted_char = char\n        result += encrypted_char\n    return result\n"}
{"task_id": "HumanEval/90", "completion": "\ndef next_smallest(lst):\n    unique_elements = sorted(set(lst))\n    if len(unique_elements) < 2:\n        return None\n    return unique_elements[1]\n"}
{"task_id": "HumanEval/91", "completion": "\ndef is_bored(S):\n    if not isinstance(S, str):\n        raise ValueError(\"Input must be a string\")\n\n    sentences = S.split('.')\n    sentences = [sentence.strip() for sentence in sentences if sentence.strip()]\n    sentences = [sentence for sentence in sentences if sentence]\n\n    count = 0\n    for sentence in sentences:\n        if sentence.startswith(\"I\"):\n            count += 1\n\n    return count\n"}
{"task_id": "HumanEval/92", "completion": "\ndef any_int(x, y, z):\n    # Check if all inputs are integers\n    if all(isinstance(num, int) for num in [x, y, z]):\n        # Check all possible combinations of the numbers\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False\n"}
{"task_id": "HumanEval/93", "completion": "\ndef encode(message):\n    encoded_message = \"\"\n    vowels = \"aeiouAEIOU\"\n    for char in message:\n        if char.isalpha():\n            if char.lower() in vowels:\n                if char.islower():\n                    encoded_message += chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n                else:\n                    encoded_message += chr((ord(char) - ord('A') + 2) % 26 + ord('A'))\n            else:\n                if char.islower():\n                    encoded_message += char.upper()\n                else:\n                    encoded_message += char.lower()\n        else:\n            encoded_message += char\n    return encoded_message\n"}
{"task_id": "HumanEval/94", "completion": "\ndef skjkasdkd(lst):\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    primes = [x for x in lst if is_prime(x)]\n    if primes:\n        max_prime = max(primes)\n        return sum(int(digit) for digit in str(max_prime))\n    else:\n        return 0\n"}
{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(dict):\n    if not dict:\n        return False\n    lowercase_keys = all(isinstance(key, str) and key.islower() for key in dict.keys())\n    uppercase_keys = all(isinstance(key, str) and key.isupper() for key in dict.keys())\n    return lowercase_keys or uppercase_keys\n"}
{"task_id": "HumanEval/96", "completion": "\ndef count_up_to(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    primes = [i for i in range(2, n) if is_prime(i)]\n    return primes[:n]\n"}
{"task_id": "HumanEval/97", "completion": "\ndef multiply(a, b):\n    # Get the unit digits of the input integers\n    unit_a = abs(a) % 10\n    unit_b = abs(b) % 10\n    \n    # Calculate the product of the unit digits\n    product = unit_a * unit_b\n    \n    return product\n"}
{"task_id": "HumanEval/98", "completion": "\ndef count_upper(s):\n    count = 0\n    vowels = \"AEIOU\"\n    for i in range(0, len(s), 2):\n        if s[i] in vowels:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/99", "completion": "\ndef closest_integer(value):\n    num = float(value)\n    if num % 1 < 0.5:\n        return int(num)\n    elif num > 0:\n        return int(num) + 1\n    else:\n        return int(num) - 1\n"}
{"task_id": "HumanEval/100", "completion": "\ndef make_a_pile(n):\n    pile = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = n * 3 + 1\n        pile.append(n)\n    return pile\n"}
{"task_id": "HumanEval/101", "completion": "\nimport re\n\ndef words_string(s):\n    words = re.findall(r'\\b\\w+\\b', s)\n    return words\n"}
{"task_id": "HumanEval/102", "completion": "\ndef choose_num(x, y):\n    if x > y:\n        return -1\n    for num in range(y, x - 1, -1):\n        if num % 2 == 0:\n            return num\n    return -1\n"}
{"task_id": "HumanEval/103", "completion": "\ndef rounded_avg(n, m):\n    if n > m:\n        return -1\n    average = round((n + m) / 2)\n    return bin(average)\n"}
{"task_id": "HumanEval/104", "completion": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x, return a sorted list of all \n    elements that haven't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n    \n    return sorted([num for num in x if all(int(digit) % 2 != 0 for digit in str(num))])\n"}
{"task_id": "HumanEval/105", "completion": "\ndef by_length(arr):\n    valid_numbers = [num for num in arr if 0 < num < 10]\n    sorted_valid_numbers = sorted(valid_numbers)\n    reversed_sorted_valid_numbers = list(reversed(sorted_valid_numbers))\n    number_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    result = [number_names[num] for num in reversed_sorted_valid_numbers]\n    return result\n"}
{"task_id": "HumanEval/106", "completion": "\ndef f(n):\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            fact = 1\n            for j in range(1, i+1):\n                fact *= j\n            result.append(fact)\n        else:\n            result.append(sum(range(1, i+1)))\n    return result\n"}
{"task_id": "HumanEval/107", "completion": "\ndef even_odd_palindrome(n):\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n    for num in range(1, n+1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return (even_count, odd_count)\n"}
{"task_id": "HumanEval/108", "completion": "\ndef count_nums(arr):\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list of integers\")\n\n    count = 0\n    for num in arr:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers\")\n\n        if num == 0:\n            count += 1\n        elif num > 0:\n            sum_of_digits = sum(int(digit) for digit in str(num))\n            if sum_of_digits > 0:\n                count += 1\n        else:\n            sum_of_digits = sum(int(digit) for digit in str(num)[1:])\n            if sum_of_digits > 0:\n                count += 1\n\n    return count\n"}
{"task_id": "HumanEval/109", "completion": "\ndef move_one_ball(arr):\n    if not arr:\n        return True\n    sorted_arr = sorted(arr)\n    n = len(arr)\n    for i in range(n):\n        if arr == sorted_arr:\n            return True\n        arr = [arr[-1]] + arr[:-1]\n    return False\n"}
{"task_id": "HumanEval/110", "completion": "\ndef exchange(lst1, lst2):\n    even_count = sum(1 for num in lst1 if num % 2 == 0)\n    if even_count == len(lst1):\n        return \"YES\"\n    return \"NO\"\n"}
{"task_id": "HumanEval/111", "completion": "\ndef histogram(test):\n    # Split the input string into individual letters\n    letters = test.split()\n\n    # Create a dictionary to store the count of each letter\n    letter_count = {}\n    max_count = 0\n\n    # Count the occurrences of each letter\n    for letter in letters:\n        if letter in letter_count:\n            letter_count[letter] += 1\n        else:\n            letter_count[letter] = 1\n\n        # Update the maximum count\n        if letter_count[letter] > max_count:\n            max_count = letter_count[letter]\n\n    # Find letters with the maximum count\n    max_letters = {letter: count for letter, count in letter_count.items() if count == max_count}\n\n    return max_letters\n"}
{"task_id": "HumanEval/112", "completion": "\ndef reverse_delete(s, c):\n    result = ''.join([char for char in s if char not in c])\n    return (result, result == result[::-1])\n"}
{"task_id": "HumanEval/113", "completion": "\ndef odd_count(lst):\n    result = []\n    for s in lst:\n        odd_count = sum(1 for c in s if int(c) % 2 != 0)\n        result.append(\"the number of odd elements {}n the str{}ng {} of the {}nput.\".format(odd_count, odd_count, odd_count, odd_count))\n    return result\n"}
{"task_id": "HumanEval/114", "completion": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n    if not nums:\n        return 0\n    \n    min_sum = float('inf')\n    current_sum = 0\n    \n    for num in nums:\n        current_sum = min(num, current_sum + num)\n        min_sum = min(min_sum, current_sum)\n    \n    return min_sum\n"}
{"task_id": "HumanEval/115", "completion": "\ndef max_fill(grid, capacity):\n    total_lowering = 0\n    for row in grid:\n        water_in_row = sum(row)\n        while water_in_row > 0:\n            water_in_row -= min(capacity, water_in_row)\n            total_lowering += 1\n    return total_lowering\n"}
{"task_id": "HumanEval/116", "completion": "\ndef sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))\n"}
{"task_id": "HumanEval/117", "completion": "\ndef select_words(s, n):\n    def count_consonants(word):\n        consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ'\n        return sum(1 for letter in word if letter in consonants)\n\n    if not s:\n        return []\n\n    words = s.split()\n    result = [word for word in words if count_consonants(word) == n]\n    return result\n"}
{"task_id": "HumanEval/118", "completion": "\ndef get_closest_vowel(word):\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n    \n    word = word.strip(consonants)\n    for i in range(len(word) - 1, 0, -1):\n        if word[i] in vowels:\n            return word[i]\n    return \"\"\n"}
{"task_id": "HumanEval/119", "completion": "\ndef match_parens(lst):\n    stack = []\n    for s in lst[0] + lst[1]:\n        if s == '(':\n            stack.append(s)\n        else:\n            if not stack:\n                return 'No'\n            stack.pop()\n    return 'Yes' if not stack else 'No'\n"}
{"task_id": "HumanEval/120", "completion": "\ndef maximum(arr, k):\n    arr.sort()\n    return arr[-k:]\n"}
{"task_id": "HumanEval/121", "completion": "\ndef solution(lst):\n    return sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n"}
{"task_id": "HumanEval/122", "completion": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    # Input validation\n    if not arr or k < 1 or k > len(arr):\n        return 0  # or raise an exception based on the specific requirements\n\n    # Calculate the sum of elements with at most two digits from the first k elements\n    total = 0\n    for num in arr[:k]:\n        if 10 <= num < 100:\n            total += num\n    return total\n"}
{"task_id": "HumanEval/123", "completion": "\ndef get_odd_collatz(n):\n    collatz_sequence = [n]\n    while n != 1:\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n        collatz_sequence.append(n)\n    return sorted([num for num in collatz_sequence if num % 2 != 0])\n"}
{"task_id": "HumanEval/124", "completion": "\ndef valid_date(date):\n    if len(date) != 10:\n        return False\n    \n    month, day, year = date.split('-')\n    \n    if len(month) != 2 or len(day) != 2 or len(year) != 4:\n        return False\n    \n    try:\n        month = int(month)\n        day = int(day)\n        year = int(year)\n    except ValueError:\n        return False\n    \n    if month < 1 or month > 12:\n        return False\n    \n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or (year % 400 == 0):\n            if day < 1 or day > 29:\n                return False\n        else:\n            if day < 1 or day > 28:\n                return False\n    \n    return True\n"}
{"task_id": "HumanEval/125", "completion": "\ndef split_words(txt):\n    if not isinstance(txt, str):\n        return \"Input must be a string\"\n    \n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = sum(1 for char in txt if char.islower() and ord(char) % 2 != 0)\n        return count\n"}
{"task_id": "HumanEval/126", "completion": "\ndef is_sorted(lst):\n    if len(lst) != len(set(lst)):  # check for duplicates\n        return False\n    for i in range(len(lst) - 1):  # check for ascending order\n        if lst[i] > lst[i + 1]:\n            return False\n    return True\n"}
{"task_id": "HumanEval/127", "completion": "\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n    \n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n    \n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n    \n    if intersection_end < intersection_start:\n        return \"NO\"\n    \n    intersection_length = intersection_end - intersection_start + 1\n    \n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\n"}
{"task_id": "HumanEval/128", "completion": "\ndef prod_signs(arr):\n    \"\"\"\n    Returns the sum of magnitudes of integers multiplied by product of all signs of each number in the array.\n\n    Args:\n    arr (list): An array of integers.\n\n    Returns:\n    int or None: The sum of magnitudes of integers multiplied by product of all signs. Returns None for empty arr.\n    \"\"\"\n\n    if not arr:\n        return None\n\n    product = 1\n    total_sum = 0\n\n    for num in arr:\n        if num > 0:\n            product *= 1\n            total_sum += abs(num)\n        elif num < 0:\n            product *= -1\n            total_sum += abs(num)\n        else:\n            product *= 0\n\n    return total_sum * product\n"}
{"task_id": "HumanEval/129", "completion": "\ndef minPath(grid, k):\n    N = len(grid)\n    start = min((grid[i][j], i, j) for i in range(N) for j in range(N))[1:]\n    directions = [(0, 1), (0, -1), (1, 0), (-1, 0)]\n    \n    def is_valid(x, y):\n        return 0 <= x < N and 0 <= y < N\n    \n    def dfs(x, y, path, visited):\n        if len(path) == k:\n            return path\n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if is_valid(nx, ny) and (nx, ny) not in visited:\n                new_path = dfs(nx, ny, path + [grid[nx][ny]], visited | {(nx, ny)})\n                if new_path:\n                    return new_path\n        return None\n    \n    return dfs(start[0], start[1], [grid[start[0]][start[1]]], {start})\n"}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [1, 0]\n    else:\n        tribonacci = [0, 1, 1]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tribonacci.append(tribonacci[i - 1] + tribonacci[i - 2] + tribonacci[i - 3])\n            else:\n                tribonacci.append(1 + i // 2)\n        return tribonacci\n"}
{"task_id": "HumanEval/131", "completion": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n    product = 1\n    for digit in str(n):\n        if int(digit) % 2 != 0:\n            product *= int(digit)\n    return product if product > 1 else 0\n"}
{"task_id": "HumanEval/132", "completion": "\ndef is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']' and stack:\n            stack.pop()\n    return bool(stack)\n"}
{"task_id": "HumanEval/133", "completion": "\nimport math\n\ndef sum_squares(lst):\n    return sum(math.ceil(x)**2 for x in lst)\n"}
{"task_id": "HumanEval/134", "completion": "\ndef check_if_last_char_is_a_letter(txt):\n    return txt and txt[-1].isalpha() and (len(txt) == 1 or txt[-2].isspace())\n"}
{"task_id": "HumanEval/135", "completion": "\ndef can_arrange(arr):\n    largest_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] <= arr[i-1]:\n            largest_index = i - 1\n    return largest_index\n"}
{"task_id": "HumanEval/136", "completion": "\ndef largest_smallest_integers(lst):\n    neg_integers = [x for x in lst if x < 0]\n    pos_integers = [x for x in lst if x > 0]\n\n    if not neg_integers:\n        largest_neg = None\n    else:\n        largest_neg = max(neg_integers)\n\n    if not pos_integers:\n        smallest_pos = None\n    else:\n        smallest_pos = min(pos_integers)\n\n    return (largest_neg, smallest_pos)\n"}
{"task_id": "HumanEval/137", "completion": "\ndef compare_one(a, b):\n    if type(a) == type(b):\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if float(a) == float(b):\n            return None\n        elif float(a) > float(b):\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.') if ',' in a else a\n        b = b.replace(',', '.') if ',' in b else b\n        if float(a) == float(b):\n            return None\n        elif float(a) > float(b):\n            return a\n        else:\n            return b\n    else:\n        return None\n"}
{"task_id": "HumanEval/138", "completion": "\ndef is_equal_to_sum_even(n):\n    if n < 8:\n        return False\n    if n % 2 != 0:\n        return False\n    return True\n"}
{"task_id": "HumanEval/139", "completion": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n\n    return result\n"}
{"task_id": "HumanEval/140", "completion": "\ndef fix_spaces(text):\n    if not isinstance(text, str):\n        return \"Invalid input: input must be a string\"\n    \n    if not text:\n        return text\n    \n    result = \"\"\n    consecutive_space_count = 0\n    for char in text:\n        if char == \" \":\n            consecutive_space_count += 1\n            if consecutive_space_count > 2:\n                result += \"-\"\n                consecutive_space_count = 1\n            else:\n                result += \"_\"\n        else:\n            result += char\n            consecutive_space_count = 0\n    \n    return result\n"}
{"task_id": "HumanEval/141", "completion": "\ndef file_name_check(file_name):\n    if file_name.count('.') != 1:\n        return 'No'\n    name, ext = file_name.split('.')\n    if len(name) == 0 or not name[0].isalpha() or len([c for c in name if c.isdigit()]) > 3:\n        return 'No'\n    if ext not in ['txt', 'exe', 'dll']:\n        return 'No'\n    return 'Yes'\n"}
{"task_id": "HumanEval/142", "completion": "\ndef sum_squares(lst):\n    \"\"\"\n    This function takes a list of integers as input. For each entry in the list, it squares the integer if its index is a multiple of 3 \n    and cubes the integer if its index is a multiple of 4 and not a multiple of 3. Entries at indexes that do not meet these conditions \n    remain unchanged. The function then returns the sum of all entries in the modified list.\n    \n    Examples:\n    For lst = [1,2,3], the output should be 6\n    For lst = [], the output should be 0\n    For lst = [-1,-5,2,-1,-5], the output should be -126\n    \"\"\"\n    modified_lst = [val**2 if i % 3 == 0 else val**3 if i % 4 == 0 and i % 3 != 0 else val for i, val in enumerate(lst)]\n    return sum(modified_lst)\n"}
{"task_id": "HumanEval/143", "completion": "\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)\n"}
{"task_id": "HumanEval/144", "completion": "\ndef simplify(x, n):\n    def parse_fraction(fraction):\n        numerator, denominator = map(int, fraction.split('/'))\n        return numerator, denominator\n\n    def is_whole_number(result):\n        return result.is_integer()\n\n    x_num, x_denom = parse_fraction(x)\n    n_num, n_denom = parse_fraction(n)\n\n    product = (x_num * n_num) / (x_denom * n_denom)\n\n    return is_whole_number(product)\n"}
{"task_id": "HumanEval/145", "completion": "\ndef order_by_points(nums):\n    return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))\n"}
{"task_id": "HumanEval/146", "completion": "\ndef specialFilter(nums):\n    count = 0\n    for num in nums:\n        if num > 10 and str(num)[0] in ['1', '3', '5', '7', '9'] and str(num)[-1] in ['1', '3', '5', '7', '9']:\n            count += 1\n    return count\n"}
{"task_id": "HumanEval/147", "completion": "\ndef get_max_triples(n):\n    # Create the array as described in the problem statement\n    a = [i*i - i + 1 for i in range(1, n + 1)]\n    \n    # Initialize count array for mod 3\n    count = [0, 0, 0]\n    \n    # Count the frequency of remainder of each element in the array\n    for i in range(n):\n        count[a[i] % 3] += 1\n    \n    # Total triples will sum up to a multiple of 3, so calculate the triples (i, j, k) such that\n    # a[i] % 3 + a[j] % 3 + a[k] % 3 = 0\n    triples = count[0] * (count[0] - 1) * (count[0] - 2) // 6 + \\\n               count[0] * count[1] * count[2] + \\\n               count[1] * (count[1] - 1) * (count[1] - 2) // 6\n    \n    return triples\n"}
{"task_id": "HumanEval/148", "completion": "\ndef bf(planet1, planet2):\n    planets_order = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \n    if planet1 not in planets_order or planet2 not in planets_order:\n        return ()\n    \n    start_index = planets_order.index(planet1)\n    end_index = planets_order.index(planet2)\n    \n    if start_index > end_index:\n        start_index, end_index = end_index, start_index\n    \n    return tuple(sorted(planets_order[start_index + 1:end_index], key=lambda x: planets_order.index(x)))\n"}
{"task_id": "HumanEval/149", "completion": "\ndef sorted_list_sum(lst):\n    # Remove strings with odd lengths\n    filtered_list = [word for word in lst if len(word) % 2 == 0]\n    \n    # Sort the list by length and then alphabetically\n    sorted_list = sorted(filtered_list, key=lambda x: (len(x), x))\n    \n    return sorted_list\n"}
{"task_id": "HumanEval/150", "completion": "\ndef x_or_y(n, x, y):\n    def is_prime(num):\n        \"\"\"Check if the given number is a prime number.\"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    return x if is_prime(n) else y\n"}
{"task_id": "HumanEval/151", "completion": "\ndef double_the_difference(lst):\n    return sum(x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0)\n"}
{"task_id": "HumanEval/152", "completion": "\ndef compare(game, guess):\n    \"\"\"\n    Determine if a person correctly guessed the results of a number of matches.\n    \n    Args:\n    game: list of integers, representing the scores of matches\n    guess: list of integers, representing the guesses for the scores\n    \n    Returns:\n    list of integers, denoting the absolute difference between the guess and the score for each match\n    \"\"\"\n    if len(game) != len(guess):\n        raise ValueError(\"The lengths of game and guess arrays should be equal\")\n    \n    differences = [abs(game[i] - guess[i]) for i in range(len(game))]\n    return differences\n"}
{"task_id": "HumanEval/153", "completion": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Returns the strongest extension for the given class name and list of extensions.\n    \n    Args:\n    class_name (str): The name of the class.\n    extensions (list of str): The list of extensions.\n    \n    Returns:\n    str: The class name concatenated with the strongest extension name.\n    \"\"\"\n    max_strength = float('-inf')\n    strongest_extension = \"\"\n    \n    for ext in extensions:\n        cap_count = sum(1 for c in ext if c.isupper())\n        sm_count = sum(1 for c in ext if c.islower())\n        strength = cap_count - sm_count\n        \n        if strength > max_strength:\n            max_strength = strength\n            strongest_extension = ext\n    \n    return f\"{class_name}.{strongest_extension}\"\n"}
{"task_id": "HumanEval/154", "completion": "\ndef cycpattern_check(a, b):\n    if len(a) < len(b):\n        return False\n    double_a = a + a\n    return b in double_a\n"}
{"task_id": "HumanEval/155", "completion": "\ndef even_odd_count(num):\n    \"\"\"Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n    if not isinstance(num, int):\n        raise ValueError(\"Input must be an integer\")\n\n    num_str = str(abs(num))\n    even_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\n    odd_count = len(num_str) - even_count\n\n    if num < 0:\n        return (odd_count, even_count)\n    else:\n        return (even_count, odd_count)\n"}
{"task_id": "HumanEval/156", "completion": "\ndef int_to_mini_roman(number):\n    if not 1 <= number <= 1000:\n        raise ValueError(\"Input number must be between 1 and 1000\")\n\n    roman_numerals = {\n        1000: 'm', 900: 'cm', 500: 'd', 400: 'cd', 100: 'c', 90: 'xc',\n        50: 'l', 40: 'xl', 10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n    }\n\n    result = ''\n    for value, numeral in roman_numerals.items():\n        while number >= value:\n            result += numeral\n            number -= value\n\n    return result.lower()\n"}
{"task_id": "HumanEval/157", "completion": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    # Check triangle inequality theorem\n    if a + b > c and a + c > b and b + c > a:\n        # Check Pythagorean theorem\n        if a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:\n            return True\n    return False\n"}
{"task_id": "HumanEval/158", "completion": "\ndef find_max(words):\n    if not words:\n        return \"\"\n\n    def unique_char_count(word):\n        return len(set(word))\n\n    max_unique_count = 0\n    max_unique_word = \"\"\n    for word in words:\n        unique_count = unique_char_count(word)\n        if unique_count > max_unique_count or (unique_count == max_unique_count and word < max_unique_word):\n            max_unique_count = unique_count\n            max_unique_word = word\n\n    return max_unique_word\n"}
{"task_id": "HumanEval/159", "completion": "\ndef eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = max(0, remaining - need)\n    return [total_eaten, carrots_left]\n"}
{"task_id": "HumanEval/160", "completion": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n    expression = str(operand[0])\n    for i in range(len(operator)):\n        expression += \" \" + operator[i] + \" \" + str(operand[i+1])\n    return eval(expression)\n"}
{"task_id": "HumanEval/161", "completion": "\ndef solve(s):\n    result = ''\n    has_letter = False\n    for char in s:\n        if char.isalpha():\n            has_letter = True\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    if not has_letter:\n        result = result[::-1]\n    return result\n"}
{"task_id": "HumanEval/162", "completion": "\nimport hashlib\n\ndef string_to_md5(text):\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode('utf-8')).hexdigest()\n"}
{"task_id": "HumanEval/163", "completion": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    result = [i for i in range(a, b+1) if i % 2 == 0]\n    return sorted(result)\n"}
